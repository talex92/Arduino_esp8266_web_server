
/* Virtuino ESP8266 + Arduino Mega web server example
* Created by Ilias Lamprou
* Modifyed by Alex Tatar
* Updated Feb 2 2017
* Before  running this code config the settings below as the instructions on the right
*
 *
 * Download latest Virtuino android app from the link: https://play.google.com/store/apps/details?id=com.virtuino_automations.virtuino&hl=el
* Getting starting link:
* Video tutorial link: https://youtu.be/wuNsnbkj9nk
* Contact address for questions or comments: iliaslampr@gmail.com
*/
 
/*========= VirtuinoEsp8266 Class methods 
 
 * boolean connectESP8266_toInternet(String wifiNetworkName,String wifiNetworkPassword, int port);  Set your home wifi network SSID and PASSWORD  (Put this function on start of void setup)
*
* boolean createLocalESP8266_wifiServer(String wifiNetworkName,String wifiNetworkPassword, int port, int mode); Use this function to create an ESP8266 wifi local network
*                                                                   set port to 80
 *                                                                   set mode=2 to use ESP8266 only as access point
 *                                                                   set mode=3 to use ESP8266 as access point and internet station.
*
*  bool esp8266_setIP(byte a1, byte a2, byte a3, byte a4);           set ESP8266 local IP. Use this function after connectESP8266_toInternet function
 *
* ========= Virtuino general methods 
 *  void vDigitalMemoryWrite(int digitalMemoryIndex, int value)       write a value to a Virtuino digital memory   (digitalMemoryIndex=0..31, value range = 0 or 1)
*  int  vDigitalMemoryRead(int digitalMemoryIndex)                   read  the value of a Virtuino digital memory (digitalMemoryIndex=0..31, returned value range = 0 or 1)
*  void vMemoryWrite(int memoryIndex, float value);                  write a value to Virtuino memory             (memoryIndex=0..31, value range as float value)
*  float vMemoryRead(int memoryIndex);                               read a value of  Virtuino memory             (memoryIndex=0..31, returned a float value
*  run();                                                            neccesary command to communicate with Virtuino android app  (on start of void loop)
*  int getPinValue(int pin);                                         read the value of a Pin. Usefull to read the value of a PWM pin
*
*/
 
 
#include <OneWire.h>
#include <DallasTemperature.h>
// Data wire is plugged into pin 2 on the Arduino
#define ONE_WIRE_BUS 2
// Setup a oneWire instance to communicate with any OneWire devices
// (not just Maxim/Dallas temperature ICs)
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature.
DallasTemperature sensors(&oneWire);
#include "VirtuinoEsp8266_WebServer.h"
 
 
// Code to use SoftwareSerial
//#include <SoftwareSerial.h>
//SoftwareSerial espSerial =  SoftwareSerial(2,3);      // arduino RX pin=2  arduino TX pin=3    connect the arduino RX pin to esp8266 module TX pin   -  connect the arduino TX pin to esp8266 module RX pin
//VirtuinoEsp8266_WebServer virtuino(espSerial,9600);   // Your esp8266 device's speed is probably at 115200. For this reason the first time set the speed to 115200 or your esp8266 configured speed and upload
                                                        // then change the serial speed to 9600 and upload again
                                                     
// Code to use HardwareSerial
VirtuinoEsp8266_WebServer virtuino(Serial1,115200);    // enable this line and disable all Software serial lines
                                                        // Open VirtuinoESP8266_WebServer.h file on the virtuino library folder
                                                        // and disable the line: #define ESP8266_USE_SOFTWARE_SERIAL
 
 
 
 
//================================================================== setup
//==================================================================
//==================================================================
void setup()
{
  virtuino.DEBUG=true;                                            // set this value TRUE to enable the serial monitor status.It is neccesary to get your esp8266 local ip
  // start serial port
  Serial.begin(115200);                                             // Enable this line only if DEBUG=true
 
  Serial.println("Dallas Temperature IC Control Library Demo");
 
 
 
  //virtuino.connectESP8266_toInternet("ArobsTgM","Ar0b$Wirele$$",8000);  // Set your home wifi router SSID and PASSWORD. ESP8266 will connect to Internet. Port=8000
  //virtuino.esp8266_setIP(192,168,80,140);                                  // Set a local ip. Forward port 80 to this IP on your router

  virtuino.connectESP8266_toInternet("HUAWEI-8b72","hS42unS4",8000);  // Set your home wifi router SSID and PASSWORD. ESP8266 will connect to Internet. Port=80
  virtuino.esp8266_setIP(192,168,100,140);                                          // Set a local ip. Forward port 80 to this IP on your router
 
  //virtuino.createLocalESP8266_wifiServer("ESP8266 NETWORK NAME","PASSWORD",80,2);   //Enable this line to create a wifi local netrork using ESP8266 as access point
                                                                                      //Do not use less than eight characters for the password. Port=80
                                                                                      //Default access point ESP8266 ip=192.168.4.1.
 
 // virtuino.networkState=1;                                     // After the first time you run this code you don't need the previous setup lines.
                                                              // for this reason you can enable this line and disable all previous lines.
                                                               // Make the same if you want to setup the ESP8266 module manually
  virtuino.password="1234";                                     // Set a password to your web server for more protection
                                                                // avoid special characters like ! $ = @ # % & * on your password. Use only numbers or text characters
                             
  
//------ enter your setup code below
   //dht.begin();                // Start DHT sensor
  
  // Start up the library
     sensors.begin();
   
    
}
 
 
//================================================================== loop
//==================================================================
//==================================================================
 
long timeStored=0;
 
void loop(){
   virtuino.run();           //  neccesary command to communicate with Virtuino android app
  
    //------ enter your loop code below here
    //------ avoid to use delay() function in your code
 
    // your code .....
 
 // ------------------- Read DHT11 sensor values every 10 second
   if (millis()> timeStored+10000) {        // Use this technique and avoid to use the function delay(10000)
      sensors.requestTemperatures(); // Send the command to get temperatures
      float t = sensors.getTempCByIndex(0);
      //float h = dht.readHumidity();
        if (isnan(t)) {
        if (virtuino.DEBUG) Serial.println("Failed to read from sensor");
        virtuino.vMemoryWrite(0,-1000);                  // Write an out of instrument range value to virtual memory 0
        //virtuino.vMemoryWrite(1,-1000);                  // Write an out of instrument range value to virtual memory 1
       
      }
      else {
          if (virtuino.DEBUG)  Serial.println("Temp="+String(t)+" *C");
             virtuino.vMemoryWrite(0,t);                  // Write temperature to virtual memory 0 
      }
      timeStored= millis();
   }
 
/*****************************************************************************************/
 
 
  
 }
